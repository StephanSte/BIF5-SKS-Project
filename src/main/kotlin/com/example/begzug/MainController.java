package com.example.begzug;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private AuthorRepository authorRepository;
    @Autowired
    private ArticleRepository articleRepository;
    @Autowired
    private SightRepository sightRepository;

    @GetMapping(path="/add") // Map ONLY POST Requests
    public String addNewUser (@RequestParam String name, @RequestParam String surname
            , @RequestParam String email, Model model) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Author n = new Author();
        //n.setId(1);
        n.setName(name);
        n.setSurname(surname);
        n.setEmail(email);

        authorRepository.save(n);
        return getAllAuthors(model);
    }



    @PostMapping("/post")
    public void postCustomer(Author Author){
        //log
        Author temp = new Author();

        temp.setName(Author.getName());
        temp.setSurname(Author.getSurname());
        temp.setEmail(Author.getEmail());

        authorRepository.save(temp);
    }

    @PutMapping("/put/{id}")
    public void putCustomer(String name, String surname, String email, @PathVariable String id){
        // reset customer.Id
        Author temp = new Author();

        temp.setName(name);
        temp.setSurname(surname);
        temp.setEmail(email);

        authorRepository.save(temp);
    }

    @GetMapping("/writearticle")
    public String writeArticle(Model model){
        List<Sight> searchResults = sightRepository.findAll();
        model.addAttribute("sights", searchResults);
        return "Article";
    }
/*
    @DeleteMapping("/delete/{id}")
    public void deleteUserById(int id){
        authorRepository.deleteById(id);
    }*/


    @PostMapping("/addA")
    public String addNewArticle (@RequestParam String title, @RequestParam String author, @RequestParam String text, @RequestParam String sight, Model model) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        List<Author> searchResults = authorRepository.findByName(author);
        Article a = new Article();
        System.out.println(text);
        a.setTitle(title);
        a.setText(text);
        if (searchResults.size() < 1) {
            return "failure.html";
        }
        a.setAuthor(authorRepository.findByName(author).get(0));
        a.setSight(sightRepository.findByName(sight).get(0));
        System.out.println(a.getText());
        articleRepository.save(a);

        return getSingleArticle(model, a.getId());
    }

    @GetMapping("/articles")
    public String showAllArticles(Model model)
    {
        model.addAttribute("articles", articleRepository.findAll());
        return "ArticleOverview";
    }

    @GetMapping(path="/allAuthors")
    public String getAllAuthors(Model model) {
        model.addAttribute("authors", authorRepository.findAll());
        return "AllAuthors";
    }

    @GetMapping(path="/payment")
    public String getAllClicks(@RequestParam("authorname") String authorName, Model model) {
        System.out.println("Looking for " + authorName);
        List<Author> searchResults = authorRepository.findByName(authorName);
        if (searchResults.size() < 1) {
            return "failure.html";
        }
        Author author = authorRepository.findByName(authorName).get(0);
        List<Article> allArticles = articleRepository.findArticlesByAuthor(author);
        System.out.println("List Count: " + allArticles.size());
        model.addAttribute("author", author);
        int sumOfClicks = 0;
        for (Article art : allArticles) {
            sumOfClicks += art.getClicks();
        }
        int eurosPaid = sumOfClicks / 100;
        int centsPaid = sumOfClicks % 100;
        model.addAttribute("euros", eurosPaid);
        model.addAttribute("cents", centsPaid);
        model.addAttribute("totalclicks", sumOfClicks);

        return "Payment";
    }

    @GetMapping(path="/articleid")
    public String getSingleArticle(Model model, @RequestParam("id") int id) {
        model.addAttribute("article", articleRepository.findById(id));
        // Life is beautiful.
        Article ViewedArticle = articleRepository.findById(id);
        ViewedArticle.setClicks(ViewedArticle.getClicks() + 1);
        System.out.println("Clicks: " + ViewedArticle.getClicks());
        articleRepository.save(ViewedArticle);
        return "SingleArticle";
    }

}