package com.example.begzug;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private AuthorRepository authorRepository;
    @Autowired
    private ArticleRepository articleRepository;

    @GetMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody
    Author addNewUser (@RequestParam String name, @RequestParam String surname
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Author n = new Author();
        n.setId(1);
        n.setName(name);
        n.setSurname(surname);
        n.setEmail(email);

        return authorRepository.save(n);
    }

    @GetMapping(path="/")
    public @ResponseBody Iterable<Author> getAllUsers() {
        // This returns a JSON or XML with the users
        return authorRepository.findAll();
    }

    @PostMapping("/post")
    public void postCustomer(Author Author){
        //log
        Author temp = new Author();

        temp.setName(Author.getName());
        temp.setSurname(Author.getSurname());
        temp.setEmail(Author.getEmail());

        authorRepository.save(temp);
    }

    @PutMapping("/put/{id}")
    public void putCustomer(String name, String surname, String email, @PathVariable String id){
        // reset customer.Id
        Author temp = new Author();

        temp.setName(name);
        temp.setSurname(surname);
        temp.setEmail(email);

        authorRepository.save(temp);
    }

    @DeleteMapping("/delete/{id}")
    public void deleteUserById(int id){
        authorRepository.deleteById(id);
    }


    @GetMapping("/addA")
    public @ResponseBody Article addNewArticle (@RequestParam String title, @RequestParam String user) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Article a = new Article();
        a.setId(1);
        a.setTitle(title);
        a.setAuthor(authorRepository.findByName(user)[0]);

        //System.out.println(userRepository.findByName(user)[0].getName());
        return articleRepository.save(a);
    }
}